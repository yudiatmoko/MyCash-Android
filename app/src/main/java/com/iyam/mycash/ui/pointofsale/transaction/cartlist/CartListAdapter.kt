package com.iyam.mycash.ui.pointofsale.transaction.cartlistimport android.content.Contextimport android.view.LayoutInflaterimport android.view.ViewGroupimport android.widget.Toastimport androidx.recyclerview.widget.AsyncListDifferimport androidx.recyclerview.widget.DiffUtilimport androidx.recyclerview.widget.RecyclerViewimport androidx.recyclerview.widget.RecyclerView.ViewHolderimport com.iyam.mycash.Rimport com.iyam.mycash.databinding.LayoutCartItemBindingimport com.iyam.mycash.model.Cartimport com.iyam.mycash.utils.ViewHolderBinderimport com.iyam.mycash.utils.doneEditingimport com.iyam.mycash.utils.toCurrencyFormatclass CartListAdapter(    private val context: Context,    private val cartListener: CartListener? = null) : RecyclerView.Adapter<ViewHolder>() {    private val dataDiffer = AsyncListDiffer(        this,        object : DiffUtil.ItemCallback<Cart>() {            override fun areItemsTheSame(                oldItem: Cart,                newItem: Cart            ): Boolean {                return oldItem.id == newItem.id            }            override fun areContentsTheSame(                oldItem: Cart,                newItem: Cart            ): Boolean {                return oldItem.hashCode() == newItem.hashCode()            }        }    )    override fun onCreateViewHolder(        parent: ViewGroup,        viewType: Int    ): ViewHolder {        val binding =            LayoutCartItemBinding.inflate(                LayoutInflater.from(parent.context),                parent,                false            )        return CartItemViewHolder(            context,            binding,            cartListener        )    }    override fun onBindViewHolder(        holder: ViewHolder,        position: Int    ) {        (holder as ViewHolderBinder<Cart>).bind(dataDiffer.currentList[position])    }    fun setData(data: List<Cart>) {        dataDiffer.submitList(data)    }    override fun getItemCount(): Int = dataDiffer.currentList.size    class CartItemViewHolder(        private val context: Context,        private val binding: LayoutCartItemBinding,        private val cartListener: CartListener?    ) : RecyclerView.ViewHolder(binding.root), ViewHolderBinder<Cart> {        override fun bind(item: Cart) {            setCartData(item)            setClickListener(item)            setCartQuantity(item)        }        private fun setClickListener(item: Cart) {            binding.apply {                btnPlus.setOnClickListener {                    if (item.productQuantity < (item.productStock ?: Int.MAX_VALUE)) {                        cartListener?.onPlusTotalItemCartClicked(item)                    } else {                        Toast.makeText(                            context,                            context.getString(R.string.max_stock_reached, item.productStock),                            Toast.LENGTH_SHORT                        ).show()                    }                }                btnMinus.setOnClickListener {                    if (item.productQuantity > 1) {                        cartListener?.onMinusTotalItemCartClicked(item)                    }                }                btnRemove.setOnClickListener { cartListener?.onRemoveCartClicked(item) }            }        }        private fun setCartQuantity(item: Cart) {            binding.etQuantity.setText(item.productQuantity.toString())            binding.etQuantity.doneEditing {                var quantity = binding.etQuantity.text.toString().toIntOrNull() ?: 1                val maxStock = item.productStock ?: Int.MAX_VALUE                when {                    quantity > maxStock -> {                        Toast.makeText(                            context,                            context.getString(R.string.max_stock_reached, maxStock),                            Toast.LENGTH_SHORT                        ).show()                        quantity = maxStock                        binding.etQuantity.setText(quantity.toString())                    }                    quantity < 1 -> {                        Toast.makeText(                            context,                            context.getString(R.string.min_quantity_reached),                            Toast.LENGTH_SHORT                        ).show()                        quantity = 1                        binding.etQuantity.setText(quantity.toString())                    }                    else -> {                        val newItem = item.copy(productQuantity = quantity)                        cartListener?.onUserDoneEditingQuantity(newItem)                    }                }            }        }        private fun setCartData(item: Cart) {            binding.apply {                tvProductName.text = item.productName                tvProductPrice.text =                    (item.productPrice * item.productQuantity).toFloat().toCurrencyFormat()                etQuantity.setText(item.productQuantity.toString())            }        }    }}interface CartListener {    fun onPlusTotalItemCartClicked(cart: Cart)    fun onMinusTotalItemCartClicked(cart: Cart)    fun onRemoveCartClicked(cart: Cart)    fun onUserDoneEditingQuantity(cart: Cart)}