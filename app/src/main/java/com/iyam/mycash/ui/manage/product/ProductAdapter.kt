package com.iyam.mycash.ui.manage.productimport android.content.Contextimport android.graphics.Colorimport android.graphics.drawable.ColorDrawableimport android.view.LayoutInflaterimport android.view.ViewGroupimport android.widget.TextViewimport androidx.appcompat.app.AlertDialogimport androidx.recyclerview.widget.AsyncListDifferimport androidx.recyclerview.widget.DiffUtilimport androidx.recyclerview.widget.RecyclerViewimport coil.loadimport com.iyam.mycash.Rimport com.iyam.mycash.databinding.LayoutProductItemBindingimport com.iyam.mycash.model.Productimport com.iyam.mycash.utils.ViewHolderBinderimport com.iyam.mycash.utils.toCurrencyFormatclass ProductAdapter(    private val context: Context,    private val deleteListener: (Product) -> Unit,    private val editListener: (Product) -> Unit) : RecyclerView.Adapter<RecyclerView.ViewHolder>() {    private val differ = AsyncListDiffer(        this,        object : DiffUtil.ItemCallback<Product>() {            override fun areItemsTheSame(                oldItem: Product,                newItem: Product            ): Boolean {                return oldItem.id == newItem.id            }            override fun areContentsTheSame(                oldItem: Product,                newItem: Product            ): Boolean {                return oldItem.hashCode() == newItem.hashCode()            }        }    )    override fun onCreateViewHolder(        parent: ViewGroup,        viewType: Int    ): ProductViewHolder {        val binding =            LayoutProductItemBinding.inflate(LayoutInflater.from(parent.context), parent, false)        return ProductViewHolder(            context,            binding,            deleteListener,            editListener        )    }    override fun getItemCount(): Int {        return differ.currentList.size    }    override fun onBindViewHolder(        holder: RecyclerView.ViewHolder,        position: Int    ) {        (holder as ViewHolderBinder<Product>).bind(differ.currentList[position])    }    fun setData(data: List<Product>) {        differ.submitList(data)    }    class ProductViewHolder(        private val context: Context,        private val binding: LayoutProductItemBinding,        private val deleteClicked: (Product) -> Unit,        private val editClicked: (Product) -> Unit    ) : RecyclerView.ViewHolder(binding.root), ViewHolderBinder<Product> {        private fun showDialog(item: Product) {            val dialogView =                LayoutInflater.from(itemView.context).inflate(R.layout.layout_dialog, null)            val dialog = AlertDialog.Builder(itemView.context)                .setView(dialogView)                .create()            dialog.getWindow()?.setBackgroundDrawableResource(R.drawable.cv_background)            dialog.getWindow()?.setBackgroundDrawable(ColorDrawable(Color.TRANSPARENT))            val tvTitle = dialogView.findViewById<TextView>(R.id.tv_title)            val tvDesc = dialogView.findViewById<TextView>(R.id.tv_desc)            val btnNegative = dialogView.findViewById<TextView>(R.id.btn_negative)            val btnPositive = dialogView.findViewById<TextView>(R.id.btn_positive)            tvTitle.text = context.getString(R.string.delete_product_dialog_title, item.name)            tvDesc.text =                context.getString(R.string.delete_product_dialog_desc, item.name)            btnNegative.text = context.getString(R.string.cancel)            btnPositive.text = context.getString(R.string.delete)            btnNegative.setOnClickListener {                dialog.dismiss()            }            btnPositive.setOnClickListener {                deleteClicked.invoke(item)                dialog.dismiss()            }            dialog.show()        }        override fun bind(item: Product) {            binding.tvProductName.text = item.name            binding.tvProductDesc.text = context.getString(                R.string.price_per_pcs,                item.price?.toCurrencyFormat()            )            binding.ivProduct.load(item.image)            binding.btnEdit.setOnClickListener {                editClicked.invoke(item)            }            binding.btnDelete.setOnClickListener {                showDialog(item)            }        }    }}